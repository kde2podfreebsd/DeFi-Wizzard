// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionStatus {
  pending
  success
  cancel
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  deposits          Deposit[]
  depositOperations DepositOperation[]
}

model Deposit {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  operationId String   @map("operation_id") @db.Uuid
  amount      Float
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz()

  user      User             @relation(fields: [userId], references: [id])
  operation DepositOperation @relation(fields: [operationId], references: [id])

  @@unique([operationId])
}

model DepositOperation {
  id        String            @id @default(uuid()) @db.Uuid
  userId    String            @map("user_id") @db.Uuid
  status    TransactionStatus
  amount    Float
  createdAt DateTime          @default(now()) @map("created_at") @db.Timestamptz()
  updatedAt DateTime          @default(now()) @map("updated_at") @db.Timestamptz()

  user    User     @relation(fields: [userId], references: [id])
  deposit Deposit?
}
