from fastapi import APIRouter, Query, HTTPException, Body
import httpx
from typing import Dict, List, Any
from dotenv import load_dotenv
from atoma.atoma_connector import AtomaAPIClient
import re
from database.sqlite_connector import ClientDatabase

load_dotenv()
router = APIRouter()

def remove_think_tags(analysis: str) -> str:
    pattern = r"<think>.*?</think>"
    cleaned_analysis = re.sub(pattern, "", analysis, flags=re.DOTALL)
    return cleaned_analysis.strip()

def generate_prompt(answers: Dict[int, str]) -> str:
    prompt = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. 
–¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ü–µ–Ω–∫—É –µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.
–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
"""
    for qid, answer in answers.items():
        prompt += f"–í–æ–ø—Ä–æ—Å {qid}: {answer}\n"
    return prompt

@router.post("/question1", summary="–ö–∞–∫—É—é —Å—É–º–º—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã? –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É.")
async def answer_question_1(
    wallet_id: str = Query(..., description="Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    answer: str = Body(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1"),
):
    db_client = ClientDatabase()
    await db_client.save_answer(wallet_id, 1, answer)
    return {"response": "ok", "question_id": 1}

@router.post("/question2", summary="–ö–∞–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–ª—è —Å–≤–æ–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (–¥–æ 1 –≥–æ–¥–∞, 1-5 –ª–µ—Ç, –±–æ–ª–µ–µ 5 –ª–µ—Ç)?")
async def answer_question_2(
    wallet_id: str = Query(..., description="Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    answer: str = Body(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2"),
):
    db_client = ClientDatabase()
    await db_client.save_answer(wallet_id, 2, answer)
    return {"response": "ok", "question_id": 2}

@router.post("/question3", summary="–ö–∞–∫—É—é –¥–æ–ª—é —Å–≤–æ–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–º–∫–æ–∏–Ω—ã)?")
async def answer_question_3(
    wallet_id: str = Query(..., description="Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    answer: str = Body(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3"),
):
    db_client = ClientDatabase()
    await db_client.save_answer(wallet_id, 3, answer)
    return {"response": "ok", "question_id": 3}

@router.post("/question4", summary="–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–æ)?")
async def answer_question_4(
    wallet_id: str = Query(..., description="Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    answer: str = Body(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 4"),
    
):
    db_client = ClientDatabase()
    await db_client.save_answer(wallet_id, 4, answer)
    return {"response": "ok", "question_id": 4}

@router.post("/question5", summary="–ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞—é—Ç —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é, –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é, –Ω–µ –∏–≥—Ä–∞—é—Ç —Ä–æ–ª–∏)?")
async def answer_question_5(
    wallet_id: str = Query(..., description="Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
    answer: str = Body(..., description="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 5"),
    
):
    db_client = ClientDatabase()
    await db_client.save_answer(wallet_id, 5, answer)
    return {"response": "ok", "question_id": 5}

def filter_top_pools_bluefin(pools_data: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    filtered_pools = []
    for pool in pools_data:
        if "day" in pool and "apr" in pool["day"]:
            apr_total = float(pool["day"]["apr"]["total"])
            symbol = pool.get("symbol", "Unknown")
            token_a = pool["tokenA"]["info"].get("symbol", "Unknown")
            token_b = pool["tokenB"]["info"].get("symbol", "Unknown")
            address = pool.get("address", "Unknown")
            filtered_pools.append({
                "address": address,
                "tokenA": token_a,
                "tokenB": token_b,
                "pool_name": symbol,
                "apr": apr_total
            })
    top_pools = sorted(filtered_pools, key=lambda x: x["apr"], reverse=True)[:25]
    return top_pools

async def get_bluefin_pools_apr() -> Dict[str, Any]:
    async with httpx.AsyncClient() as client:
        response = await client.get(
            f"https://swap.api.sui-prod.bluefin.io/api/v1/pools/info",
            headers={"accept": "application/json"},
        )
        response.raise_for_status()
        return response.json()

@router.post("/analyze", summary="–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π –∏ —Ä–∏—Å–∫-–ø—Ä–æ—Ñ–∏–ª—è")
async def analyze_answers(
    user_id: str = Query(..., description="Wallet –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
):
    db_client = ClientDatabase()
    answers = await db_client.get_user_answers(user_id)
    if not answers or len(answers) < 5:
        raise HTTPException(status_code=400, detail="–ù–µ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")

    data = await get_bluefin_pools_apr()
    top_pools = filter_top_pools_bluefin(pools_data=data)

    prompt = f"""
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è–º –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –¢–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –æ—Ü–µ–Ω–∫—É –µ–≥–æ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.

–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —É—á–∏—Ç—ã–≤–∞–π –ø—É–ª—ã BlueFin {top_pools}

–í–æ–ø—Ä–æ—Å—ã:
1. –ö–∞–∫—É—é —Å—É–º–º—É –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–µ –∞–∫—Ç–∏–≤—ã? –£–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å—É–º–º—É.
2. –ö–∞–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –≥–æ—Ä–∏–∑–æ–Ω—Ç –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–ª—è —Å–≤–æ–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π (–¥–æ 1 –≥–æ–¥–∞, 1-5 –ª–µ—Ç, –±–æ–ª–µ–µ 5 –ª–µ—Ç)?
3. –ö–∞–∫—É—é –¥–æ–ª—é —Å–≤–æ–µ–≥–æ –∫–∞–ø–∏—Ç–∞–ª–∞ –≤—ã –≥–æ—Ç–æ–≤—ã –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤—ã–µ –∞–∫—Ç–∏–≤—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–µ–º–∫–æ–∏–Ω—ã)?
4. –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –∏ –ø–µ—Ä–µ–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ, –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ, –µ–∂–µ–º–µ—Å—è—á–Ω–æ)?
5. –ö–∞–∫—É—é —Ä–æ–ª—å –∏–≥—Ä–∞—é—Ç —ç–º–æ—Ü–∏–∏ –≤ –≤–∞—à–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏—è—Ö (–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é, –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—É—é, –Ω–µ –∏–≥—Ä–∞—é—Ç —Ä–æ–ª–∏)?

–û—Ç–≤–µ—Ç—ã —é–∑–µ—Ä–∞: {answers}

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º —Å–ª–µ–¥—É—é—â–∏—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤:
1. **–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞**:
   - –í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏ —Ä–∞–¥–∏ –≤—ã—Å–æ–∫–æ–π –ø—Ä–∏–±—ã–ª–∏.
   - –°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∏—Å–∫–∞–º–∏ –∏ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å—é.
   - –ù–∏–∑–∫–∏–π —Ä–∏—Å–∫: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ç—Ä–µ–º–∏—Ç—Å—è –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∏—Å–∫–∏, –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å.
2. **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ü–µ–ª–∏**:
   - –ö–æ—Ä–æ—Ç–∫–æ—Å—Ä–æ—á–Ω—ã–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ä–æ–∫ –¥–æ 1 –≥–æ–¥–∞.
   - –°—Ä–µ–¥–Ω–µ—Å—Ä–æ—á–Ω—ã–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ä–æ–∫ –æ—Ç 1 –¥–æ 5 –ª–µ—Ç.
   - –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ä–æ–∫ –±–æ–ª–µ–µ 5 –ª–µ—Ç.
3. **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö**:
   - –ê–∫—Ü–∏–∏: –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞.
   - –û–±–ª–∏–≥–∞—Ü–∏–∏: –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∏–∑–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞.
   - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã: –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤—ã—Å–æ–∫–∏–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞.
   - AMM –ü—É–ª—ã BlueFin: –ü–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ä–µ–¥–Ω–∏–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞.
   - –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.

–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
- –ü—Ä–µ–¥–ª–æ–∂–∏ –º–∏–Ω–∏–º—É–º 7 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ø—Ä–∏–Ω—è—Ç—å –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Å–≤–æ–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
- –£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–∫–∞ –∏ —Ç–µ–∫—É—â—É—é —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫—É—é —Å–∏—Ç—É–∞—Ü–∏—é.

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ù–∞—á–Ω–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞: "–í–ê–® –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–´–ô –ü–†–û–§–ò–õ–¨ üìä".
- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –∂–∏–≤–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞.
"""
    atoma_client = AtomaAPIClient()
    response_data = await atoma_client.create_chat_completion(
        model="deepseek-ai/DeepSeek-R1",
        messages=[{"role": "user", "content": prompt}, {"role": "assistant", "content": ""}],
    )
    await atoma_client.close()

    analysis = response_data["choices"][0]["message"]["content"]

    return {
        "response": remove_think_tags(analysis)
    }

@router.on_event("startup")
async def startup_event():
    db_client = ClientDatabase()
    await db_client.initialize_tables()
